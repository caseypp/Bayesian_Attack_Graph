#include <stdio.h>
#include <stdlib.h>
#include <math.h>//gcc -lm to build
#include <string.h>
#include "cJSON.h"
#include "cJSON.c"

/**
*Creating the one_zreo.txt
*useing the txt to calculate the probality
*
*/

/**
**     USING THE LCPD_PRE_NUMBER TO CREATING THE 0-1 ARRAY
**     LCPD_COUNT IS THE CURRENT NUMBER
**     RETURN THE ARRAY
**/

int * ONE_ZERO_CREATE(int LCPD_PRE_NUMBER,int LCPD_COUNT_CURRENT,int * ONE_ZERO_ARRAY)
{
    //int a=2;
	printf("%d.%d\n",LCPD_PRE_NUMBER,LCPD_COUNT_CURRENT);
    //int  *ONE_ZERO_ARRAY;//0-1 array
    //int LCPD_COUNT;
    //ONE_ZERO_ARRAY=(int*)malloc(LCPD_PRE_NUMBER);
    //LCPD_COUNT=pow(2,LCPD_PRE_NUMBER);
    printf("one-zero-array\n");

    //CREATE THE ONE-ZERO ARRAY
    int i;
    for (i = 0; LCPD_PRE_NUMBER >0; i++,LCPD_PRE_NUMBER--)
    {
        ONE_ZERO_ARRAY[i]=(LCPD_COUNT_CURRENT >> (LCPD_PRE_NUMBER - 1)) & 1;
        //printf("%d\t",ONE_ZERO_ARRAY[i]);

	}
	//printf("\n");
	//printf("after\n");
	return ONE_ZERO_ARRAY;
	free(ONE_ZERO_ARRAY);
}


int change_to_2sec(int LCPD_PRE_NUMBER)
{
    int d;//just for
    int LCPD_Probability_Count=pow(2,LCPD_PRE_NUMBER);//the count of the LCPD

	printf("Creating the one=_zero.txt\n\n");

	//read and write the 0-1 matrix into the one_zero.txt
	FILE *fp;
	fp=fopen("one_zero.txt","w");
	for(d = 0;d<LCPD_Probability_Count;d++)
	{

        int i;
		for (i = 0; LCPD_PRE_NUMBER > 0; i++,LCPD_PRE_NUMBER--)
		{

			if (fp!=NULL)	//open successfully
			{
                fprintf(fp,"%d",(LCPD_Probability_Count >> (LCPD_PRE_NUMBER - 1)) & 1);

			}

		}
		fprintf(fp,"\n");
	}
	fclose(fp);

	printf("Done in one_zero.txt\n\n");

	return 1;
}

/**
***        the function is to read json
***        return cjson * type data
**/
cJSON *Read_Json(char* filename)
{
    FILE *fp;//file point
    char * data;//save the data from the file
	if(fp = fopen(filename,"r"))
	{
		//get the data of the json file
        printf("Open the %s successfully\n",filename);
		fseek(fp,0,SEEK_END);//move the file point to the file tail
        long len=ftell(fp);//get the current location in the json file
        fseek(fp,0,SEEK_SET);//move the file point to the file head
        data=(char*)malloc(len+1);
        fread(data,1,len,fp);
        fclose(fp);
	}
	else
		printf("Open %s Error!\n\n",filename);

    //transfer the data to json
    cJSON * json;
    //char *out;
    json=cJSON_Parse(data);
    if (!json) {printf("Error before: [%s]\n",cJSON_GetErrorPtr());}
	else
	{
        return json;
        cJSON_Delete(json);//delete
	}

}



/**
**     THE FUNCTION IS TO REVERSE THE INT ARRAY
**     RETURN INT * TYPE DATA
**/
int * REVERSE_INT(int *DATA,int LCPD_PRE_NUMBER)
{
    int DATA_LENGTH;//THE LENGTH OF THE INT DATA
    DATA_LENGTH = LCPD_PRE_NUMBER;
    //printf("%d\n",DATA_LENGTH);
    //int DATA_TEMP;
    int i;
    for(i=0;i<DATA_LENGTH/2;i++)
    {

        int DATA_HEAD,DATA_END,DATA_TMP;
        DATA_HEAD=i;
        DATA_END=DATA_LENGTH-1-i;
        //printf("HEAD:%d\t",DATA[DATA_HEAD]);
        //printf("END:%d\t",DATA[DATA_END]);
        DATA_TMP=DATA[DATA_HEAD];
        DATA[DATA_HEAD]=DATA[DATA_END];
        DATA[DATA_END]=DATA_TMP;
    }
    return DATA;

}




int main(int arg,char* argv[])
{
	int LCPD_PRE_NUMBER;//the number of the pre node
	int LCPD_COUNT;//THE NUMBER EQUALS POW(2,LCPD_PRE_NUMBER)
    int *ONE_ZERO_ARRAY;

    cJSON *json;
    json=Read_Json("edge.json");
	//printf("read ok\n");
    //get the part of a
    cJSON *name = cJSON_GetObjectItem(json,"b");
    cJSON *pre=cJSON_GetObjectItem(name,"pre");
    LCPD_PRE_NUMBER=(int)pre->valuedouble;
    //printf("%d\n",LCPD_PRE_NUMBER);
    LCPD_COUNT=pow(2,LCPD_PRE_NUMBER);

    //printf("%d\n",LCPD_COUNT);
    //CREATE ONE-ZERO ARRAY
    //ONE_ZERO_CREATE(LCPD_PRE_NUMBER,LCPD_COUNT);
    ONE_ZERO_ARRAY=(int*)malloc(LCPD_PRE_NUMBER);

    int i;
    for(i=0;i<LCPD_COUNT;i++)
    {
        printf("%d: ",i);
        ONE_ZERO_ARRAY=ONE_ZERO_CREATE(LCPD_PRE_NUMBER,i,ONE_ZERO_ARRAY);
        //printf("haha\n");
        int k;
        for(k=0;k<LCPD_PRE_NUMBER;k++)
        {
            //printf("%d\t",ONE_ZERO_ARRAY[k]);
        }
        //printf("\n");
        //free(ONE_ZERO_ARRAY);
        
        //REVERSE THE INT DATA
        ONE_ZERO_ARRAY=REVERSE_INT(ONE_ZERO_ARRAY,LCPD_PRE_NUMBER);
        for(k=0;k<LCPD_PRE_NUMBER;k++)
        {
            printf("%d\t",ONE_ZERO_ARRAY[k]);
        }
        printf("\n");
        
    }
    /*
    while(LCPD_COUNT)
    {
        ONE_ZERO_ARRAY=ONE_ZERO_CREATE(LCPD_PRE_NUMBER,LCPD_COUNT);
        LCPD_COUNT--;
    }
    */
    /**
    //int name_count = cJSON_GetArraySize(name);
    int i=0;
    for (i =0 ; i < name_count ; i++)
    {
        cJSON *node = cJSON_GetArrayItem(name,i);//
        //int node_count = cJSON_GetArraySize(node);

        //pre node
        cJSON *attr = cJSON_GetObjectItem(node,"pre");
        int pre_count = cJSON_GetArraySize(attr);//get the pre node
        int j;
        for ( j = 0; j < pre_count ; j++)
        {
            cJSON *pre = cJSON_GetArrayItem(attr,j);
            //cout<<pre->valuestring<<endl;
            printf("%s\n",pre->valuestring);
            //cout<<11111111111111111<<endl;
        }
    }*/

    //cJSON *json;//transfer the json file to json type

	/**reading the edge file
	*get the number of the pre node
	*/

    /*
    FILE *fp_edge_json;//file point of the edge.json
	//printf("Opening pre_number.txt\n\n");
	if(fp = fopen("edge.json","r"))
	{
		/**
		*fscanf(fp,"%d",&LCPD_Pre_Number);
		*printf("Successfuly opened pre_number.txt\n\n");
		*fclose(fp);
		*/
        /*
		//get the data of the json file
        printf("Open the edge_json successfully\n");
		fseek(fp_edge_json,0,SEEK_END);//move the file point to the file tail
        long len=ftell(fp_edge_json);//get the current location in the json file
        fseek(fp_edge_json,0,SEEK_SET);//move the file point to the file head
        char *data=(char*)malloc(len+1);
        fread(data,1,len,fp_edge_json);
        fclose(fp_edge_json);
	}
	else
		printf("Open pre_number.txt Error!\n\n");
    */

    //change_to_2sec(LCPD_Pre_Number);
    //ONE_ZERO_CREATE(LCPD_PRE_NUMBER);
}
